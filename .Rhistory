##' 5) From the data set in step 4, creates a second, independent tidy data set with
##' the average of each variable for each activity and each subject.
library(dplyr)
##' download the file and unzip the files into a folder called 'Ass4' (Assignment 4)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./Dataset.zip", quiet = TRUE, mode = "wb", method = "curl")
unzip("./Dataset.zip", exdir = "./Ass4")
##' returns the directories of ALL files (recursive = true incl files into sub-directories) in
##' the named directory (pathfiles)
pathfiles <- file.path("./Ass4", "UCI HAR Dataset")
files <- list.files(pathfiles, recursive = TRUE)
##' read all features and activity labels
features <- read.table(file.path(pathfiles, "features.txt"))
activitylables <- read.table(file.path(pathfiles, "activity_labels.txt"))
##' Load X_test, X_train data and merge these 2 data files into X_merge
##' When loading features, the data has 2 columns.
##' Use the 2nd column of features for the columnnames of the X_merge data
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_merge <- bind_rows(X_test, X_train)
names(X_merge) <- columnnames[,2]
##' extract the mean and std columns from the X_merge data.
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
##' Load y_test, y_train data and merge these 2 data files into y_merge
y_test <- read.table(file.path(pathfiles, "test", "y_test.txt"))
y_train <- read.table(file.path(pathfiles, "train", "y_train.txt"))
y_merge <- bind_rows(y_test, y_train)
##' left_join the activitylables with y_merge data and name the columns by
##' Activity_ID and Activity_label
y_merge <- left_join(y_merge, activitylables, by = "V1")
names(y_merge) <- c("Activity_ID", "Activity_label")
##' Load subject_test, subject_train data and merge these 2 data files into subject_merge
##' and name the column subject_ID
subject_test <- read.table(file.path(pathfiles, "test", "subject_test.txt"))
subject_train <- read.table(file.path(pathfiles, "train", "subject_train.txt"))
subject_merge <- bind_rows(subject_test, subject_train)
names(subject_merge) <- "subject_ID"
##' bind these 3 datasets together and arrange the data according subject_ID and than Activity_ID
##' and than remove the Activity_ID column. This is to ensure the Activity_label is arranged
##' accordingly. Now this data set is ready for analysis.
data_wide <- bind_cols(subject_merge, y_merge, X_merge) %>% arrange(
subject_ID, Activity_ID) %>% select(-Activity_ID)
##' group the data by subject_ID and than Activity_label and calculate for each variable the average
tidydata <- group_by(data_wide, subject_ID, Activity_label) %>% summarise_each(funs(mean))
##' Save the tidy data file to a txt file in the directory.
write.table(tidydata, file = "./Ass4/tidydata_wide.txt")
View(data_wide)
View(tidydata)
##' Use the 2nd column of features for the columnnames of the X_merge data
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_merge <- bind_rows(X_test, X_train)
names(X_merge) <- columnnames[,2]
##' extract the mean and std columns from the X_merge data.
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
##' Use the 2nd column of features for the columnnames of the X_merge data
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_merge <- bind_rows(X_test, X_train)
names(X_merge) <- features[,2]
##' extract the mean and std columns from the X_merge data.
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
##' returns the directories of ALL files (recursive = true incl files into sub-directories) in
##' the named directory (pathfiles)
pathfiles <- file.path("./Ass4", "UCI HAR Dataset")
files <- list.files(pathfiles, recursive = TRUE)
##' read all features and activity labels
features <- read.table(file.path(pathfiles, "features.txt"))
activitylables <- read.table(file.path(pathfiles, "activity_labels.txt"))
##' Load X_test, X_train data and merge these 2 data files into X_merge
##' When loading features, the data has 2 columns.
##' Use the 2nd column of features for the columnnames of the X_merge data
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_merge <- bind_rows(X_test, X_train)
names(X_merge) <- features[,2]
##' extract the mean and std columns from the X_merge data.
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
##' Load y_test, y_train data and merge these 2 data files into y_merge
y_test <- read.table(file.path(pathfiles, "test", "y_test.txt"))
y_train <- read.table(file.path(pathfiles, "train", "y_train.txt"))
y_merge <- bind_rows(y_test, y_train)
##' left_join the activitylables with y_merge data and name the columns by
##' Activity_ID and Activity_label
y_merge <- left_join(y_merge, activitylables, by = "V1")
names(y_merge) <- c("Activity_ID", "Activity_label")
##' Load subject_test, subject_train data and merge these 2 data files into subject_merge
##' and name the column subject_ID
subject_test <- read.table(file.path(pathfiles, "test", "subject_test.txt"))
subject_train <- read.table(file.path(pathfiles, "train", "subject_train.txt"))
subject_merge <- bind_rows(subject_test, subject_train)
names(subject_merge) <- "subject_ID"
##' bind these 3 datasets together and arrange the data according subject_ID and than Activity_ID
##' and than remove the Activity_ID column. This is to ensure the Activity_label is arranged
##' accordingly. Now this data set is ready for analysis.
data_wide <- bind_cols(subject_merge, y_merge, X_merge) %>% arrange(
subject_ID, Activity_ID) %>% select(-Activity_ID)
##' group the data by subject_ID and than Activity_label and calculate for each variable the average
tidydata <- group_by(data_wide, subject_ID, Activity_label) %>% summarise_each(funs(mean))
##' Save the tidy data file to a txt file in the directory.
write.table(tidydata, file = "./Ass4/tidydata_wide.txt")
r::dim(tidydata)
r::dim(tidydata)
summry(tidydata)
summary(tidydata)
save(tidydata, file="tidydata.RData")
load(file="tidydata.RData")
knitr::opts_chunk$set(echo = TRUE)
tidydata <- read.csv("./Ass4/tidydata_wide.txt")
library(viridis)
image(volcano, col = viridis(200))
image(volcano, col = viridis(200))
library(knitr)
image(volcano, col = viridis(200))
install.packages(pandoc)
install.packages("pandoc")
##' download the file and unzip the files into a folder called 'Ass4' (Assignment 4)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./Dataset.zip", quiet = TRUE, mode = "wb", method = "curl")
unzip("./Dataset.zip", exdir = "./Ass4")
file.remove("./Dataset.zip")
save(tidydata, file="./Ass4/tidydata.RData")
load(file="./Ass4/tidydata.RData")
find.package(pandor)
find.package(pandoc)
find.package("pandoc")
find.packages("pandoc")
##' You should create one R script called run_analysis.R that does the following.
##' 1) Merges the training and the test sets to create one data set.
##' 2) Extracts only the measurements on the mean and standard deviation for each measurement.
##' 3) Uses descriptive activity names to name the activities in the data set
##' 4) Appropriately labels the data set with descriptive variable names.
##' 5) From the data set in step 4, creates a second, independent tidy data set with
##' the average of each variable for each activity and each subject.
library(dplyr)
##' download the file and unzip the files into a folder called 'Ass4' (Assignment Week 4)
##' Once downloading and unzipping is complete, remove the zip file.
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./Dataset.zip", quiet = TRUE, mode = "wb", method = "curl")
unzip("./Dataset.zip", exdir = "./Ass4")
file.remove("./Dataset.zip")
##' returns the directories of ALL files (recursive = true incl files into sub-directories) in
##' the named directory (pathfiles)
pathfiles <- file.path("./Ass4", "UCI HAR Dataset")
files <- list.files(pathfiles, recursive = TRUE)
##' read all features and activity labels
features <- read.table(file.path(pathfiles, "features.txt"))
activitylables <- read.table(file.path(pathfiles, "activity_labels.txt"))
##' Load X_test, X_train data and merge these 2 data files into X_merge
##' When loading features, the data has 2 columns.
##' Use the 2nd column of features for the columnnames of the X_merge data
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_merge <- bind_rows(X_test, X_train)
names(X_merge) <- features[,2]
##' extract the mean and std columns from the X_merge data.
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
##' Load y_test, y_train data and merge these 2 data files into y_merge
y_test <- read.table(file.path(pathfiles, "test", "y_test.txt"))
y_train <- read.table(file.path(pathfiles, "train", "y_train.txt"))
y_merge <- bind_rows(y_test, y_train)
##' left_join the activitylables with y_merge data and name the columns by
##' Activity_ID and Activity_label
y_merge <- left_join(y_merge, activitylables, by = "V1")
names(y_merge) <- c("Activity_ID", "Activity_label")
##' Load subject_test, subject_train data and merge these 2 data files into subject_merge
##' and name the column subject_ID
subject_test <- read.table(file.path(pathfiles, "test", "subject_test.txt"))
subject_train <- read.table(file.path(pathfiles, "train", "subject_train.txt"))
subject_merge <- bind_rows(subject_test, subject_train)
names(subject_merge) <- "subject_ID"
##' bind these 3 datasets together and arrange the data according subject_ID and than Activity_ID
##' and than remove the Activity_ID column. This is to ensure the Activity_label is arranged
##' accordingly. Now this data set is ready for analysis.
data_wide <- bind_cols(subject_merge, y_merge, X_merge) %>% arrange(
subject_ID, Activity_ID) %>% select(-Activity_ID)
##' group the data by subject_ID and than Activity_label and calculate for each variable the average
tidydata <- group_by(data_wide, subject_ID, Activity_label) %>% summarise_each(funs(mean))
##' Save the tidy data file to a txt file in the directory.
write.table(tidydata, file = "./Ass4/tidydata_wide.txt")
find.package(pandoc)
find.package("pandoc")
install.packages(pandoc)
install.packages("pandoc")
install.packages("Pandoc")
files
class(files)
files[1]
library(dplyr)
library(data.table)
library(data.table)
library(dtplyr)
install.packages(dtplyr)
library(dtplyr)
install.packages("dtplyr")
library(dtplyr)
library(dtplyr)
##' download the file and unzip the files into a folder called 'Ass4' (Assignment Week 4)
##' Once downloading and unzipping is complete, remove the zip file.
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./Dataset.zip", quiet = TRUE, mode = "wb", method = "curl")
unzip("./Dataset.zip", exdir = "./Ass4")
file.remove("./Dataset.zip")
##' returns the directories of ALL files (recursive = true incl files into sub-directories) in
##' the named directory (pathfiles)
pathfiles <- file.path("./Ass4", "UCI HAR Dataset")
files <- list.files(pathfiles, recursive = TRUE)
##' read all features and activity labels
features <- read.table(file.path(pathfiles, "features.txt"))
activitylables <- read.table(file.path(pathfiles, "activity_labels.txt"))
##' Load X_test, X_train data and merge these 2 data files into X_merge
##' When loading features, the data has 2 columns.
##' Use the 2nd column of features for the columnnames of the X_merge data
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_merge <- bind_rows(X_test, X_train)
names(X_merge) <- features[,2]
View(X_merge)
##' You should create one R script called run_analysis.R that does the following.
##' 1) Merges the training and the test sets to create one data set.
##' 2) Extracts only the measurements on the mean and standard deviation for each measurement.
##' 3) Uses descriptive activity names to name the activities in the data set
##' 4) Appropriately labels the data set with descriptive variable names.
##' 5) From the data set in step 4, creates a second, independent tidy data set with
##' the average of each variable for each activity and each subject.
library(dtplyr)
##' download the file and unzip the files into a folder called 'Ass4' (Assignment Week 4)
##' Once downloading and unzipping is complete, remove the zip file.
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./Dataset.zip", quiet = TRUE, mode = "wb", method = "curl")
unzip("./Dataset.zip", exdir = "./Ass4")
file.remove("./Dataset.zip")
##' returns the directories of ALL files (recursive = true incl files into sub-directories) in
##' the named directory (pathfiles)
pathfiles <- file.path("./Ass4", "UCI HAR Dataset")
files <- list.files(pathfiles, recursive = TRUE)
##' read all features and activity labels
features <- read.table(file.path(pathfiles, "features.txt"))
activitylables <- read.table(file.path(pathfiles, "activity_labels.txt"))
##' Load X_test, X_train data and merge these 2 data files into X_merge
##' When loading features, the data has 2 columns.
##' Use the 2nd column of features for the columnnames of the X_merge data
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_merge <- bind_rows(X_train, X_test)
names(X_merge) <- features[,2]
##' extract the mean and std columns from the X_merge data.
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
##' Load y_test, y_train data and merge these 2 data files into y_merge
y_train <- read.table(file.path(pathfiles, "train", "y_train.txt"))
y_test <- read.table(file.path(pathfiles, "test", "y_test.txt"))
y_merge <- bind_rows(y_train, y_test)
##' left_join the activitylables with y_merge data and name the columns by
##' Activity_ID and Activity_label
y_merge <- left_join(y_merge, activitylables, by = "V1")
names(y_merge) <- c("Activity_ID", "Activity_label")
##' Load subject_test, subject_train data and merge these 2 data files into subject_merge
##' and name the column subject_ID
subject_train <- read.table(file.path(pathfiles, "train", "subject_train.txt"))
subject_test <- read.table(file.path(pathfiles, "test", "subject_test.txt"))
subject_merge <- bind_rows(subject_train, subject_test)
names(subject_merge) <- "subject_ID"
##' bind these 3 datasets together and arrange the data according subject_ID and than Activity_ID
##' and than remove the Activity_ID column. This is to ensure the Activity_label is arranged
##' accordingly. Now this data set is ready for analysis.
data_wide <- bind_cols(subject_merge, y_merge, X_merge) %>% arrange(
subject_ID, Activity_ID) %>% select(-Activity_ID)
##' group the data by subject_ID and than Activity_label and calculate for each variable the average
tidydata <- group_by(data_wide, subject_ID, Activity_label) %>% summarise_each(funs(mean))
##' Save the tidy data file to a txt file in the directory.
write.table(tidydata, file = "./Ass4/tidydata.txt")
library(knitr)
search()
library(dtplyr)
```{r, eval = FALSE}
```{eval = FALSE}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./Dataset.zip", quiet = TRUE, mode = "wb", method = "curl")
unzip("./Dataset.zip", exdir = "./Ass4")
file.remove("./Dataset.zip")
```
pathfiles <- file.path("./Ass4", "UCI HAR Dataset")
files <- list.files(pathfiles, recursive = TRUE)
features <- read.table(file.path(pathfiles, "features.txt"))
str(features)
activitylables <- read.table(file.path(pathfiles, "activity_labels.txt"))
str(activitylables)
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_merge <- bind_rows(X_train, X_test)
names(X_merge) <- features[,2]
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
str(X_merge)
str(activitylables)
str(y_merge)
```{r eval = FALSE}
##' Returns the directories of *all* files (sub-directory files included) in the vector 'files'.
pathfiles <- file.path("./Ass4", "UCI HAR Dataset")
files <- list.files(pathfiles, recursive = TRUE)
##' Read all features and activity labels
features <- read.table(file.path(pathfiles, "features.txt"))
activitylables <- read.table(file.path(pathfiles, "activity_labels.txt"))
# The order of the rowbinding is kept consistence throughout the script to keep the correct data.
# That means train files comes for test files in the code.
# The following code merges the training and the test sets to create one data set for the 'X-files'.
# In the code below you will see 'X_train and than X_test' merged.
#       (1. Merges the training and the test sets to create one data set)
# After merging the training and test sets of 'X', the variables will be named after the features
# that were found in the code above.
#       (4. Appropriately labels the data set with descriptive variable names).
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_merge <- bind_rows(X_train, X_test)
names(X_merge) <- features[,2]
# After naming the variables it is easy to extract the measurements on the mean
# and standard deviation is for each measurement
#       (2. Extracts only the measurements on the mean and standard deviation for each measurement;
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
# The following code merges the training and the test sets to create one data set for the 'y-files'.
# In the code below you will see 'y_train and than y_test' merged.
#       (1. Merges the training and the test sets to create one data set)
# After merging the training and test sets of 'y', the variables will be named after the features
# that were found in the code above.
#       (4. Appropriately labels the data set with descriptive variable names).
y_train <- read.table(file.path(pathfiles, "train", "y_train.txt"))
y_test <- read.table(file.path(pathfiles, "test", "y_test.txt"))
y_merge <- bind_rows(y_train, y_test)
##' left_join the activitylables with y_merge data and name the columns by
##' Activity_ID and Activity_label
y_merge <- left_join(y_merge, activitylables, by = "V1")
names(y_merge) <- c("Activity_ID", "Activity_label")
##' Load subject_test, subject_train data and merge these 2 data files into subject_merge
##' and name the column subject_ID
subject_train <- read.table(file.path(pathfiles, "train", "subject_train.txt"))
subject_test <- read.table(file.path(pathfiles, "test", "subject_test.txt"))
subject_merge <- bind_rows(subject_train, subject_test)
names(subject_merge) <- "subject_ID"
##' bind these 3 datasets together and arrange the data according subject_ID and than Activity_ID
##' and than remove the Activity_ID column. This is to ensure the Activity_label is arranged
##' accordingly. Now this data set is ready for analysis.
data_wide <- bind_cols(subject_merge, y_merge, X_merge) %>% arrange(
subject_ID, Activity_ID) %>% select(-Activity_ID)
##' group the data by subject_ID and than Activity_label and calculate for each variable the average
tidydata <- group_by(data_wide, subject_ID, Activity_label) %>% summarise_each(funs(mean))
##' Save the tidy data file to a txt file in the directory.
write.table(tidydata, file = "./Ass4/tidydata.txt")
View(X_merge)
library(dtplyr)
subject_merge <- bind_rows(subject_train, subject_test)
library(dplyr)
##' Returns the directories of *all* files (sub-directory files included) in the vector 'files'.
pathfiles <- file.path("./Ass4", "UCI HAR Dataset")
files <- list.files(pathfiles, recursive = TRUE)
##' Read all features and activity labels
features <- read.table(file.path(pathfiles, "features.txt"))
activitylables <- read.table(file.path(pathfiles, "activity_labels.txt"))
# The order of the rowbinding is kept consistence throughout the script to keep the correct data.
# That means train files comes for test files in the code.
# The following code merges the training and the test sets to create one data set for the 'X-files'.
# In the code below you will see 'X_train and than X_test' merged.
#       (1. Merges the training and the test sets to create one data set)
# After merging the training and test sets of 'X', the variables will be named after the features
# that were found in the code above.
#       (4. Appropriately labels the data set with descriptive variable names).
X_train <- read.table(file.path(pathfiles, "train", "X_train.txt"))
X_test <- read.table(file.path(pathfiles, "test", "X_test.txt"))
X_merge <- bind_rows(X_train, X_test)
names(X_merge) <- features[,2]
# After naming the variables it is easy to extract the measurements on the mean
# and standard deviation is for each measurement
#       (2. Extracts only the measurements on the mean and standard deviation for each measurement;
extract <- grepl("mean|std", names(X_merge))
X_merge <- X_merge[,extract]
# The following code merges the training and the test sets to create one data set for the 'y-files'.
# In the code below you will see 'y_train and than y_test' merged.
#       (1. Merges the training and the test sets to create one data set)
# After merging the training and test sets of 'y', the variables will be named after the features
# that were found in the code above.
#       (4. Appropriately labels the data set with descriptive variable names).
y_train <- read.table(file.path(pathfiles, "train", "y_train.txt"))
y_test <- read.table(file.path(pathfiles, "test", "y_test.txt"))
y_merge <- bind_rows(y_train, y_test)
##' left_join the activitylables with y_merge data and name the columns by
##' Activity_ID and Activity_label
y_merge <- left_join(y_merge, activitylables, by = "V1")
names(y_merge) <- c("Activity_ID", "Activity_label")
##' Load subject_test, subject_train data and merge these 2 data files into subject_merge
##' and name the column subject_ID
subject_train <- read.table(file.path(pathfiles, "train", "subject_train.txt"))
subject_test <- read.table(file.path(pathfiles, "test", "subject_test.txt"))
subject_merge <- bind_rows(subject_train, subject_test)
names(subject_merge) <- "subject_ID"
##' bind these 3 datasets together and arrange the data according subject_ID and than Activity_ID
##' and than remove the Activity_ID column. This is to ensure the Activity_label is arranged
##' accordingly. Now this data set is ready for analysis.
data_wide <- bind_cols(subject_merge, y_merge, X_merge) %>% arrange(
subject_ID, Activity_ID) %>% select(-Activity_ID)
##' group the data by subject_ID and than Activity_label and calculate for each variable the average
tidydata <- group_by(data_wide, subject_ID, Activity_label) %>% summarise_each(funs(mean))
##' Save the tidy data file to a txt file in the directory.
write.table(tidydata, file = "./Ass4/tidydata.txt")
View(X_merge)
View(y_merge)
y_train <- read.table(file.path(pathfiles, "train", "y_train.txt"))
y_test <- read.table(file.path(pathfiles, "test", "y_test.txt"))
y_merge <- bind_rows(y_train, y_test)
View(y_merge)
View(tidydata)
View(tidydata)
library(knitr)
---
title: "Codebook"
author: "Stephan Nguyen"
date: "17/4/2017"
output:
html_document: default
md_document: default
pdf_document: default
---
```{r, echo=FALSE}
library(knitr)
```
#Content
* The Assignment: Getting and Cleaning Data Course Project
* Codebook
## The Assignment:Getting and Cleaning Data Course Project
The purpose of this project is to demonstrate your ability to collect, work with, and clean a data set.  The goal is to prepare tidy data that can be used for later analysis. You will be graded by your peers on a series of yes/no questions related to the project. You will be required to submit:
1. a tidy data set as described below;
2. a link to a Github repository with your script for performing the analysis;
3. and a **code book that describes the variables, the data, and any transformations or work that you performed to clean up the data** called CodeBook.md.
You should also include a README.md in the repo with your scripts. This repo explains how all of the scripts work and how they are connected.
One of the most exciting areas in all of data science right now is wearable computing - see for example this article. Companies like Fitbit, Nike, and Jawbone Up are racing to develop the most advanced algorithms to attract new users. The data linked to from the course website represent data collected from the accelerometers from the Samsung Galaxy S smartphone.
A full description is available at the site where the data was obtained:
http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
Here are the data for the project:
https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
You should create one R script called run_analysis.R that does the following.
1.	Merges the training and the test sets to create one data set.
2.	Extracts only the measurements on the mean and standard deviation for each measurement.
3.	Uses descriptive activity names to name the activities in the data set
4.	Appropriately labels the data set with descriptive variable names.
5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
Good luck!
## Data
According to the assignment the codebook should have the following information:
**"A code book that describes the variables, the data, and any transformations or work that you performed to clean up the data called CodeBook.md"**.
### The variables
#### Background information
The variables selected for this database come from the accelerometer and gyroscope 3-axial raw signals tAcc-XYZ and tGyro-XYZ. These time domain signals (prefix 't' to denote time) were captured at a constant rate of 50 Hz. Then they were filtered using a median filter and a 3rd order low pass Butterworth filter with a corner frequency of 20 Hz to remove noise. Similarly, the acceleration signal was then separated into body and gravity acceleration signals (tBodyAcc-XYZ and tGravityAcc-XYZ) using another low pass Butterworth filter with a corner frequency of 0.3 Hz.
Subsequently, the body linear acceleration and angular velocity were derived in time to obtain Jerk signals (tBodyAccJerk-XYZ and tBodyGyroJerk-XYZ). Also the magnitude of these three-dimensional signals were calculated using the Euclidean norm (tBodyAccMag, tGravityAccMag, tBodyAccJerkMag, tBodyGyroMag, tBodyGyroJerkMag).
Finally a Fast Fourier Transform (FFT) was applied to some of these signals producing fBodyAcc-XYZ, fBodyAccJerk-XYZ, fBodyGyro-XYZ, fBodyAccJerkMag, fBodyGyroMag, fBodyGyroJerkMag. (Note the 'f' to indicate frequency domain signals).
These signals were used to estimate variables of the feature vector for each pattern:
'-XYZ' is used to denote 3-axial signals in the X, Y and Z directions.
Signals for the 3-axial directions X, Y and Z   | complete description
------------------------------------------------|----------------------
tBodyAcc-XYZ            |time Body acceleration - XYZ
tGravityAcc-XYZ         |time Gravity acceleration - XYZ
tBodyAccJerk-XYZ        |time Body acceleration Jerk - XYZ
tBodyGyro-XYZ           |time Body gyro - XYZ
tBodyGyroJerk-XYZ       |time Body gyro Jerk - XYZ
tBodyAccMag             |time Body acceleration magnitude
tGravityAccMag          |time Gravity acceleration magnitude
tBodyAccJerkMag         |time Body acceleration Jerk magnitude
tBodyGyroMag            |time Body gyro magnitude
tBodyGyroJerkMag        |time Body gyro Jerk magnitude
fBodyAcc-XYZ            |frequency Body acceleration - XYZ
fBodyAccJerk-XYZ        |frequency Body acceleration Jerk - XYZ
fBodyGyro-XYZ           |frequency Body gyro - XYZ
fBodyAccMag             |frequency Body acceleration magnitude
fBodyAccJerkMag         |frequency Body acceleration Jerk magnitude
fBodyGyroMag            |frequency Body gyro magnitude
fBodyGyroJerkMag        |frequency Body gyro Jerk magnitude
The set of variables that were estimated from these signals are:
Variable | description
---------|------------
mean()| Mean value
std()| Standard deviation
mad()| Median absolute deviation
max()| Largest value in array
min()| Smallest value in array
sma()| Signal magnitude area
energy()| Energy measure. Sum of the squares divided by the number of values.
iqr()| Interquartile range
entropy()| Signal entropy
arCoeff()| Autorregresion coefficients with Burg order equal to 4
correlation()| correlation coefficient between two signals
maxInds()| index of the frequency component with largest magnitude
meanFreq()| Weighted average of the frequency components to obtain a mean frequency
skewness()| skewness of the frequency domain signal
kurtosis()| kurtosis of the frequency domain signal
bandsEnergy()| Energy of a frequency interval within the 64 bins of the FFT of each window.
angle()| Angle between to vectors.
Additional vectors obtained by averaging the signals in a signal window sample. These are used on the angle() variable:
gravityMean
tBodyAccMean
tBodyAccJerkMean
tBodyGyroMean
tBodyGyroJerkMean
#### Data
```{r tidydata, echo=FALSE, message=FALSE, warning=FALSE, tidy=TRUE}
library(data.table)
tidydata <- read.table("./Ass4/tidydata.txt")
str(tidydata)
```
